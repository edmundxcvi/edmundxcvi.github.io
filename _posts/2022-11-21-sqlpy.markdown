---
layout: post
title:  "Manipulating Databases using Python"
date:   2022-11-20 22:37:00 +0000
categories: Python SQL Pyploy Matplotlib Pandas
---

During my research career (did I mention I *have a PhD?) I used Python countless times to process, simulate, and plot scientific data. Now I'm hoping to turn my skills to analyse business data, where SQL (Structure Query Language) is king. SQL is a powerful tool for managing and retrieving large quantities of data, but to visualise this data a separate tool must be used. Again, there are countless pieces of software capable of visualising data such as Excel. However, Python is much more versatile and enables integration with a wide variety of analytical tools. This post will be about how to set up a Python enviroment that won't bork your operating system, and how to make a simple database using MySQL.

Setting Up Python
-----------------

Installation
============

The key to success in Python is not to use Windows, and so we'll be using [WSL](LINK) for all our Python-related needs. Ubuntu comes with Python by default, however this install is integral to the operating system. As a result, it's best practice to install a separate copy of Python for development, just in case. If you're feeling adventurous you can [build Python from source yourself](https://opensource.com/article/20/4/install-python-linux), or perhaps more sensibly [use a package manager](https://docs.python-guide.org/starting/install3/linux/). However, neither of these are my preferred method. While Anaconda for Windows may be a hateful experience, conda is by far the easiest way to install and use Python in Linux.** By installing Anaconda, we will get not only Python but also a few useful pre-installed packages and some management tools.

To install conda, we first need to download it. In Windows, navigate to the [Anaconda archive](`https://repo.anaconda.com/archive/`) and copy the URL of the appropriate installer (by and large you'll want `Anaconda3-XXX.XX-Linux-x86_64.sh`). To download it in WSL navigate to your downloads folder in a WSL terminal by running `cd ~/Downloads`.***. (If you get an error about the directory not existing, make it using `mkdir ~/Downloads`.) Now run `wget https://repo.anaconda.com/archive/Anaconda3-XXX.XX-Linux-x86_64.sh`, where the link is the one you copied earier.

When the download is complete, we need to make the script executable by running `chmod +x Anaconda3-XXX.XX-Linux-x86_64.sh`, and then run it using `./Anaconda3-XXX.XX-Linux-x86_64.sh`. Follow through the prompts (the defaults are fine unless you know you want it to do something different) to install Anaconda.

Virtual Environments
====================

Virtual environments are the preferred way to use Python. Each virtual environment is sandboxed from the others, preventing your projects from intefering with eachother. Conda's virtual enviroment tools are excellent. To make a virtual enviroment simply, run `conda create -n envname`, where `envname` is the name you want to give your new environment, and follow the prompts. Keep environment names short, but descriptive of what you will use the environment for. For example, to do data anyalsis we might call our virtual environment 'data'. To activate the enviroment, run `conda activate envname`, and to deactivate it run `conda deactivate`.

Installing Packages
===================

With your environment activated, you can install packages using either pip or conda. For our purposes we'll need to make sure we have numpy, matplotlib, pandas, and mysql-connector-python

* nearly have
** This is in no small part because of its integration with Fortran modules
*** You can download it in Windows and drag it to your WSL user area using File Explorer if you like, but that's not as fun.
